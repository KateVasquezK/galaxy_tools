diff --git a/lib/galaxy/config.py b/lib/galaxy/config.py
index 535178b..fb3a439 100644
--- a/lib/galaxy/config.py
+++ b/lib/galaxy/config.py
@@ -192,6 +192,10 @@ class Configuration(object):
         self.install_database_connection = kwargs.get("install_database_connection", None)
         self.install_database_engine_options = get_database_engine_options(kwargs, model_prefix="install_")
 
+        # Corals database related configuration.
+        self.corals_database_connection = kwargs.get("corals_database_connection", None)
+        self.corals_database_engine_options = get_database_engine_options(kwargs, model_prefix="corals")
+
         # Where dataset files are stored
         self.file_path = resolve_path(kwargs.get("file_path", "database/files"), self.root)
         # new_file_path and legacy_home_dir can be overridden per destination in job_conf.
@@ -967,6 +971,14 @@ def get_database_url(config):
     return db_url
 
 
+def get_corals_database_url(config):
+    if config.corals_database_connection:
+        return config.corals_database_connection
+    else:
+        #return "sqlite:///./database/stag.sqlite?isolation_level=IMMEDIATE"
+        return "postgresql://postgres:postgres@localhost/stag"
+
+
 def init_models_from_config(config, map_install_models=False, object_store=None, trace_logger=None):
     db_url = get_database_url(config)
     from galaxy.model import mapping
@@ -1147,6 +1159,7 @@ class ConfiguresGalaxyMixin(object):
         # database file under the hood.
         combined_install_database = not(install_db_url and install_db_url != db_url)
         install_db_url = install_db_url or db_url
+        corals_db_url = self.config.corals_database_connection
 
         if getattr(self.config, "max_metadata_value_size", None):
             from galaxy.model import custom_types
@@ -1160,6 +1173,9 @@ class ConfiguresGalaxyMixin(object):
             if not combined_install_database:
                 from galaxy.model.tool_shed_install.migrate.check import create_or_verify_database as tsi_create_or_verify_database
                 tsi_create_or_verify_database(install_db_url, self.config.install_database_engine_options, app=self)
+            # Handle the corals database.
+            from galaxy.model.corals.migrate.check import create_or_verify_database as corals_create_or_verify_database
+            corals_create_or_verify_database(corals_db_url, self.config.corals_database_engine_options, app=self)
 
         if check_migrate_tools:
             # Alert the Galaxy admin to tools that have been moved from the distribution to the tool shed.
@@ -1186,6 +1202,11 @@ class ConfiguresGalaxyMixin(object):
             install_db_engine_options = self.config.install_database_engine_options
             self.install_model = install_mapping.init(install_db_url,
                                                       install_db_engine_options)
+        # Handle the corals database.
+        from galaxy.model.corals import mapping as corals_mapping
+        log.info("galaxy_corals database using its own connection %s" % corals_db_url)
+        corals_db_engine_options = self.config.corals_database_engine_options
+        self.corals_model = corals_mapping.init(corals_db_url, corals_db_engine_options)
 
     def _configure_signal_handlers(self, handlers):
         for sig, handler in handlers.items():
